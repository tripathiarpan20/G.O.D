include:
  - ./docker-compose.observability.yml

services:
  postgresql:
    image: postgres:latest
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "127.0.0.1:5432:5432"
    env_file:
      - .vali.env

  dbmate:
    image: amacneil/dbmate
    volumes:
      - ./validator/db:/db
    command: --wait up
    depends_on:
      postgresql:
        condition: service_healthy
    env_file:
      - .vali.env
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/${POSTGRES_DB}?sslmode=disable

  redis:
    image: redis/redis-stack:latest
    ports:
      - "127.0.0.1:6379:6379"
    deploy:
      restart_policy:
        condition: on-failure

  validator:
    container_name: validator
    build:
      context: .
      dockerfile: dockerfiles/compose_validator.dockerfile
    depends_on:
      dbmate:
        condition: service_completed_successfully
      redis:
        condition: service_started
    entrypoint: ["opentelemetry-instrument", "--logs_exporter", "otlp", "--traces_exporter", "none", "--metrics_exporter", "otlp", "--service_name", "validator",
                "uvicorn", "--factory", "validator.asgi:factory",
                "--host", "0.0.0.0",
                "--port", "${VALIDATOR_PORT}",
                "--env-file", "/app/.vali.env"
    ]
    env_file:
      - .vali.env
    environment:
      OTEL_EXPORTER_OTLP_PROTOCOL: "http/protobuf"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED: "true"
      OTEL_PYTHON_LOG_CORRELATION: "true"
      ENV: ${ENV}
    deploy:
      restart_policy:
        condition: on-failure

  validator_cycle:
    container_name: validator_cycle
    build:
      context: .
      dockerfile: dockerfiles/compose_validator_cycle.dockerfile
    depends_on:
      dbmate:
        condition: service_completed_successfully
      redis:
        condition: service_started
    entrypoint: ["opentelemetry-instrument", "--logs_exporter", "otlp", "--traces_exporter", "none", "--metrics_exporter", "otlp", "--service_name", "validator_cycle", "python", "-u", "-m", "validator.cycle.main"]
    volumes:
      - ${HOME}/.bittensor/wallets:/root/.bittensor/wallets
      - /var/run/docker.sock:/var/run/docker.sock  # mounting Docker socket
    env_file:
      - .vali.env
    environment:
      OTEL_EXPORTER_OTLP_PROTOCOL: "http/protobuf"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED: "true"
      OTEL_PYTHON_LOG_CORRELATION: "true"
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      ENV: ${ENV}
    deploy:
      restart_policy:
        condition: on-failure
volumes:
  postgres_data:


networks:
  redis_network:
